{"version":3,"sources":["Components/Scoreboard.js","Components/Gamecard.js","Components/Gameboard.js","Components/Cards.js","Components/Loose.js","Components/Win.js","Components/Gameover.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","score","highScore","Gamecard","Image","src","process","card","id","style","width","borderRadius","margin","border","padding","cursor","onClick","handlCardClick","Gameboard","gameBoard","cardsArray","map","index","Container","className","maxWidth","marginTop","cards","logoURL","clicked","Loose","Modal","centered","show","gameLoose","onHide","resetGame","Dialog","Header","Title","Body","Footer","Button","Win","gameWin","Gameover","setGameWin","setGameLoose","App","useState","setScore","setHighScore","setCardsArray","useEffect","randomizeCards","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","checkWin","every","fluid","Navbar","backgroundColor","variant","Brand","Text","clickedCard","find","icon","newCardsArray","i","href","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11587456.chunk.js","sourcesContent":["import { React } from \"react\";\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <div>\r\n      <h5>Score: {props.score}</h5>\r\n      <h5>High Score: {props.highScore}</h5>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import { React } from \"react\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Gamecard(props) {\r\n  const style = {\r\n    width: \"18%\",\r\n    borderRadius: \"10px\",\r\n    margin: \"3px\",\r\n    border: \"1px solid black\",\r\n    padding: \"5px\",\r\n    cursor: \"pointer\",\r\n  };\r\n  return (\r\n    <Image\r\n      src={process.env.PUBLIC_URL + `/images/${props.card.id}.png`}\r\n      style={style}\r\n      onClick={() => {\r\n        props.handlCardClick(props.card.id);\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Gamecard;\r\n","import { React } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Gamecard from \"./Gamecard\";\r\n\r\nfunction Gameboard(props) {\r\n  //map cards.js array into gameBoard obejct\r\n  const gameBoard = props.cardsArray.map((card, index) => {\r\n    return (\r\n      <Gamecard key={index} card={card} handlCardClick={props.handlCardClick} />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Container\r\n      className=\"d-flex flex-wrap\"\r\n      style={{ maxWidth: 600, marginTop: 20 }}\r\n    >\r\n      {gameBoard}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Gameboard;\r\n","const cards = [\r\n  {\r\n    id: 1,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/1.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/2.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/3.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/4.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/5.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/6.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 7,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/7.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 8,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/8.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 9,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/9.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 10,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/10.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 11,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/11.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 12,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/12.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 13,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/13.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 14,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/14.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 15,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/15.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 16,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/16.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 17,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/17.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 18,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/18.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 19,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/19.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 20,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/20.png\",\r\n    clicked: false,\r\n  },\r\n];\r\n\r\nexport default cards;\r\n","import { React } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nfunction Loose(props) {\r\n  return (\r\n    <Modal centered show={props.gameLoose} onHide={() => props.resetGame()}>\r\n      <Modal.Dialog>\r\n        <Modal.Header>\r\n          <Modal.Title>Game Over, you loose</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Your score: {props.score}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => props.resetGame()}>Try Again</Button>\r\n        </Modal.Footer>\r\n      </Modal.Dialog>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Loose;\r\n","import { React } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nfunction Win(props) {\r\n  return (\r\n    <Modal centered show={props.gameWin} onHide={() => props.resetGame()}>\r\n      <Modal.Dialog>\r\n        <Modal.Header>\r\n          <Modal.Title>Congratulations, you win!</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Your score is: {props.score}</Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button onClick={() => props.resetGame()}>Play Again</Button>\r\n        </Modal.Footer>\r\n      </Modal.Dialog>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Win;\r\n","import { React } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Loose from \"./Loose\";\r\nimport Win from \"./Win\";\r\n\r\nfunction Gameover(props) {\r\n  return (\r\n    <Container>\r\n      <Win\r\n        score={props.score}\r\n        gameWin={props.gameWin}\r\n        setGameWin={props.setGameWin}\r\n        resetGame={props.resetGame}\r\n      />\r\n\r\n      <Loose\r\n        score={props.score}\r\n        gameLoose={props.gameLoose}\r\n        setGameLoose={props.setGameLoose}\r\n        resetGame={props.resetGame}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Gameover;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Navbar } from \"react-bootstrap\";\nimport Scoreboard from \"./Components/Scoreboard\";\nimport Gameboard from \"./Components/Gameboard\";\nimport cards from \"./Components/Cards\";\nimport Gameover from \"./Components/Gameover.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [cardsArray, setCardsArray] = useState(cards); //cards from Cards.js array\n  const [gameWin, setGameWin] = useState(false);\n  const [gameLoose, setGameLoose] = useState(false);\n\n  useEffect(() => {\n    randomizeCards();\n    if (score >= highScore) {\n      setHighScore(score);\n    }\n  });\n\n  //Shuffle funtion - Fisher-Yates aglorithm\n  function shuffle(array) {\n    var currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  //Shuffle cardsArray\n  const randomizeCards = () => {\n    setCardsArray(shuffle(cardsArray));\n  };\n\n  const handlCardClick = (id) => {\n    //find clicked card by ID\n    const clickedCard = cardsArray.find((icon) => icon.id === id);\n\n    //check if card was already clicked\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      setScore(score + 1);\n    } else {\n      setGameLoose(true);\n    }\n\n    checkWin();\n  };\n\n  //check if all cards were clicked\n  const checkWin = () => {\n    if (cardsArray.every(checkClicked)) {\n      setGameWin(true); //GAME WIN\n    }\n\n    function checkClicked(card) {\n      return card.clicked === true;\n    }\n  };\n\n  //reset game, set all cards.clicked to false\n  const resetGame = () => {\n    let newCardsArray = cardsArray;\n    for (let i in newCardsArray) {\n      newCardsArray[i].clicked = false;\n    }\n    setScore(0);\n    setGameLoose(false);\n    setGameWin(false);\n    setCardsArray(newCardsArray);\n  };\n\n  return (\n    <Container fluid style={{ padding: 0 }}>\n      <Navbar style={{ backgroundColor: \"#292b2c\" }} variant=\"dark\">\n        <Container>\n          <Navbar.Brand>\n            <h3>Memory Game</h3>\n          </Navbar.Brand>\n          <Navbar.Text>\n            <Scoreboard score={score} highScore={highScore} />\n          </Navbar.Text>\n        </Container>\n      </Navbar>\n      <Gameboard cardsArray={cardsArray} handlCardClick={handlCardClick} />\n      <Gameover\n        score={score}\n        gameWin={gameWin}\n        setGameWin={setGameWin}\n        gameLoose={gameLoose}\n        setGameLoose={setGameLoose}\n        resetGame={resetGame}\n      />\n      <div className=\"credits\">\n        Stickers made by{\" \"}\n        <a href=\"https://www.flaticon.com/authors/stickers\" title=\"Stickers\">\n          Stickers\n        </a>{\" \"}\n        from{\" \"}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}