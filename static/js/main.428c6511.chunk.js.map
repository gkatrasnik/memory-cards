{"version":3,"sources":["Components/Scoreboard.js","Components/Gamecard.js","Components/Gameboard.js","Components/Cards.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","score","Gamecard","Card","style","width","height","onClick","handlCardClick","card","id","Img","src","process","Gameboard","gameBoard","cardsArray","map","index","setScore","Container","className","cards","logoURL","clicked","App","useState","setCardsArray","useEffect","randomizeCards","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","checkWin","every","console","log","resetGame","newCardsArray","i","Navbar","Brand","clickedCard","find","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.428c6511.chunk.js","sourcesContent":["import { React } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\n\r\nfunction Scoreboard(props) {\r\n  return <h3>Score: {props.score}</h3>;\r\n}\r\n\r\nexport default Scoreboard;\r\n","import { React } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Gamecard(props) {\r\n  return (\r\n    <Card\r\n      style={{ width: 120, height: 120 }}\r\n      onClick={() => {\r\n        props.handlCardClick(props.card.id);\r\n      }}\r\n    >\r\n      <Card.Img\r\n        src={process.env.PUBLIC_URL + `/images/${props.card.id}.png`}\r\n        style={{ width: 100, height: 100 }}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Gamecard;\r\n","import { React } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Gamecard from \"./Gamecard\";\r\n\r\nfunction Gameboard(props) {\r\n  //map cards.js array into gameBoard obejct\r\n  const gameBoard = props.cardsArray.map((card, index) => {\r\n    return (\r\n      <Gamecard\r\n        key={index}\r\n        index={index}\r\n        score={props.score}\r\n        setScore={props.setScore}\r\n        card={card}\r\n        handlCardClick={props.handlCardClick}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <Container className=\"d-flex flex-wrap\">{gameBoard}</Container>;\r\n}\r\n\r\nexport default Gameboard;\r\n","const cards = [\r\n  {\r\n    id: 1,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/1.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/2.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/3.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/4.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/5.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/6.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 7,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/7.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 8,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/8.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 9,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/9.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 10,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/10.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 11,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/11.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 12,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/12.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 13,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/13.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 14,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/14.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 15,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/15.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 16,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/16.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 17,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/17.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 18,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/18.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 19,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/19.png\",\r\n    clicked: false,\r\n  },\r\n  {\r\n    id: 20,\r\n    logoURL: process.env.PUBLIC_URL + \"/images/20.png\",\r\n    clicked: false,\r\n  },\r\n];\r\n\r\nexport default cards;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Navbar } from \"react-bootstrap\";\nimport Scoreboard from \"./Components/Scoreboard\";\nimport Gameboard from \"./Components/Gameboard\";\nimport cards from \"./Components/Cards\";\nimport Loose from \"./Components/Loose\";\nimport Win from \"./Components/Win\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [cardsArray, setCardsArray] = useState(cards); //cards from Cards.js array\n\n  useEffect(() => {\n    randomizeCards();\n  });\n\n  //Shuffle funtion - Fisher-Yates aglorithm\n  function shuffle(array) {\n    var currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  //Shuffle cardsArray\n  const randomizeCards = () => {\n    setCardsArray(shuffle(cardsArray));\n  };\n\n  const handlCardClick = (id) => {\n    //find clicked card by ID\n    const clickedCard = cardsArray.find((icon) => icon.id === id);\n\n    //check if card was already clicked\n    if (!clickedCard.clicked) {\n      clickedCard.clicked = true;\n      setScore(score + 1);\n    } else {\n      console.log(\"LOOOSEEEE!!!\"); // --------> render game over component\n      setScore(0);\n      resetGame();\n    }\n\n    checkWin();\n  };\n\n  //check if all cards were clicked\n  const checkWin = () => {\n    if (cardsArray.every(checkClicked)) {\n      console.log(\"WIIIINNNNNNN!\"); // -----------> render win component\n      resetGame();\n    }\n\n    function checkClicked(card) {\n      return card.clicked === true;\n    }\n  };\n\n  //reset game, set all cards.clicked to false\n  const resetGame = () => {\n    let newCardsArray = cardsArray;\n    for (let i in newCardsArray) {\n      newCardsArray[i].clicked = false;\n    }\n    setScore(0);\n    setCardsArray(newCardsArray);\n  };\n\n  return (\n    <Container>\n      <Navbar>\n        <Container>\n          <Navbar.Brand>\n            <h1>Memory Game</h1>\n          </Navbar.Brand>\n          <Scoreboard score={score} />\n        </Container>\n      </Navbar>\n      <Gameboard\n        score={score}\n        setScore={setScore}\n        cardsArray={cardsArray}\n        handlCardClick={handlCardClick}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}